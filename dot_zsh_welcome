#!/bin/zsh

clear
# Set timezone to Asia/Jakarta permanently (if not already)
if [ "$(readlink /etc/localtime)" != "/usr/share/zoneinfo/Asia/Jakarta" ]; then
    ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
    if [ -w /etc/timezone ]; then
        echo "Asia/Jakarta" > /etc/timezone
    fi
fi

# Check if terminal supports colors
if [ -t 1 ]; then
  ncolors=$(tput colors)
  if [ -n "$ncolors" ] && [ $ncolors -ge 8 ]; then
    # Terminal supports colors, define ANSI color codes
    RED=$(tput setaf 1; tput bold)
    GREEN=$(tput setaf 2; tput bold)
    BLUE=$(tput setaf 4; tput bold)
    CYAN=$(tput setaf 6; tput bold)
    YELLOW=$(tput setaf 3; tput bold)
    WHITE=$(tput setaf 7; tput bold)
    MAGENTA=$(tput setaf 5; tput bold)
    RESET=$(tput sgr0)
    BOLD=$(tput bold)
  else
    # Terminal doesn't support colors, use empty strings
    RED=""
    GREEN=""
    BLUE=""
    CYAN=""
    YELLOW=""
    WHITE=""
    MAGENTA=""
    RESET=""
    BOLD=""
  fi
else
  # Not a terminal, use empty strings
  RED=""
  GREEN=""
  BLUE=""
  CYAN=""
  YELLOW=""
  WHITE=""
  MAGENTA=""
  RESET=""
  BOLD=""
fi

# --- Animasi System Initializing ---

typewriter() {
    text="$1"
    delay="${2:-0.03}"
    for ((i=0; i<${#text}; i++)); do
        printf "%c" "${text:$i:1}"
        sleep $delay
    done
    echo
}


# Cek dukungan IPv4 dan IPv6
ipv4_support=$(ip a | grep -q "inet " && echo -e "${GREEN}✔️${RESET}" || echo -e "${RED}❌️${RESET}")
ipv6_support=$(ip a | grep -q "inet6 " && echo -e "${GREEN}✔️${RESET}" || echo -e "${RED}❌️${RESET}")

# Mendapatkan waktu saat ini
current_time=$(date +"%A, %d %B %Y %H:%M:%S %Z")

# Garis pemisah tebal
separator="${WHITE}═════════════════════════════════════════════════════════════${RESET}"

# Provider/ASN
get_provider_info() {
    GREEN='\033[0;32m'
    RESET='\033[0m'

    if command -v curl >/dev/null 2>&1; then
        provider=$(curl -s --max-time 3 ipinfo.io/org)
    elif command -v wget >/dev/null 2>&1; then
        provider=$(wget -qO- --timeout=3 ipinfo.io/org)
    else
        provider="curl/wget not found"
    fi

    if [[ -z "$provider" ]]; then
        echo -e "${GREEN}${BOLD}├─ Provider/ASN :${RESET} Failed Connect to server"
    else
        echo -e "${GREEN}${BOLD}├─ Provider/ASN :${RESET} $provider"
    fi
}


# Info penggunaan jaringan (vnstat)
get_vnstat_info() {
    iface=$(ip -4 -o addr show scope global | awk '{print $2}' | head -n 1)
    vnstat_today=$(vnstat -i "$iface" --oneline 2>/dev/null | awk -F\; '{print $11 " RX, " $12 " TX"}')
    if [[ -n "$vnstat_today" ]]; then
        echo -e "${GREEN}${BOLD}├─ Net Usage    :${RESET} $vnstat_today (hari ini)"
    else
        echo -e "${GREEN}${BOLD}├─ Net Usage    :${RESET} Data tidak tersedia"
    fi
}

# Info update paket
get_update_info() {
    if command -v apt >/dev/null 2>&1; then
        updates=$(apt list --upgradable 2>/dev/null | grep -v "Listing" | wc -l)
        echo -e "${GREEN}${BOLD}├─ Paket Update :${RESET} $updates paket tersedia"
    elif command -v dnf >/dev/null 2>&1; then
        updates=$(dnf check-update 2>/dev/null | grep -E '^[a-zA-Z0-9]' | wc -l)
        echo -e "${GREEN}${BOLD}├─ Paket Update :${RESET} $updates paket tersedia"
    elif command -v yum >/dev/null 2>&1; then
        updates=$(yum check-update 2>/dev/null | grep -E '^[a-zA-Z0-9]' | wc -l)
        echo -e "${GREEN}${BOLD}├─ Paket Update :${RESET} $updates paket tersedia"
    elif command -v pacman >/dev/null 2>&1; then
        updates=$(checkupdates 2>/dev/null | wc -l)
        echo -e "${GREEN}${BOLD}├─ Paket Update :${RESET} $updates paket tersedia"
    else
        echo -e "${GREEN}${BOLD}├─ Paket Update :${RESET} Tidak diketahui (package manager tidak ditemukan)"
    fi
}

# Public IP jika NAT
get_public_ip_if_nat() {
    ip_global=$(ip -4 -o addr show scope global | awk '{print $4}' | cut -d/ -f1 | grep -v '^127\.' | head -n 1)
    iface=$(ip -4 -o addr show scope global | awk '{print $2}' | head -n 1)
    if [[ $ip_global =~ ^10\. ]] || \
       [[ $ip_global =~ ^192\.168\. ]] || \
       [[ $ip_global =~ ^172\.(1[6-9]|2[0-9]|3[0-1])\. ]] || \
       [[ $iface == "venet0" ]]; then
        if command -v curl >/dev/null 2>&1; then
            public_ip=$(curl -s https://ipv4.icanhazip.com/ | tr -d '\n')
        elif command -v wget >/dev/null 2>&1; then
            public_ip=$(wget -qO- https://ipv4.icanhazip.com/ | tr -d '\n')
        else
            public_ip="curl/wget not found"
        fi
        echo -e "${GREEN}${BOLD}├─ Public IPv4  :${RESET} $public_ip"
    fi
}

# Status NAT/Non-NAT
detect_nat_status() {
    ip_global=$(ip -4 -o addr show scope global | awk '{print $4}' | cut -d/ -f1 | grep -v '^127\.' | head -n 1)
    iface=$(ip -4 -o addr show scope global | awk '{print $2}' | head -n 1)
    if [[ $ip_global =~ ^10\. ]] || \
       [[ $ip_global =~ ^192\.168\. ]] || \
       [[ $ip_global =~ ^172\.(1[6-9]|2[0-9]|3[0-1])\. ]] || \
       [[ $iface == "venet0" ]]; then
        echo -e "${YELLOW}${BOLD}NAT (Private IP via $iface)${RESET}"
    elif [[ -n "$ip_global" ]]; then
        echo -e "${GREEN}${BOLD}Public (Non-NAT, $iface)${RESET}"
    else
        echo -e "${RED}Tidak terdeteksi IP global${RESET}"
    fi
}

# --- OUTPUT ---

echo -e "$separator"
echo -e "${CYAN}${BOLD}  Selamat Datang, $(whoami)!  ${RESET}"
echo -e "${YELLOW}  $current_time  ${RESET}"
echo -e "$separator"
echo ""
echo -e "${BLUE}${BOLD}> System's Information${RESET}"
echo -e "${GREEN}├─ Hostname     :${RESET} $(hostname)"
echo -e "${GREEN}├─ OS           :${RESET} $(lsb_release -ds 2>/dev/null || uname -o)"
echo -e "${GREEN}├─ Kernel       :${RESET} $(uname -r)"
echo -e "${GREEN}├─ Uptime       :${RESET} $(uptime -p)"
echo -e "${GREEN}├─ CPU          :${RESET} $(nproc) core(s) / $(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}')"
echo -e "${GREEN}├─ Disk         :${RESET} $(df -h / | awk 'NR==2 {print $3 " / " $2 " (" $5 ")"}')"
echo -e "${GREEN}├─ Memory       :${RESET} $(free -m | awk 'NR==2 {printf "%.1fMB / %.1fMB (%.0f%%)", $3, $2, $3*100/$2 }')"
echo -e "${GREEN}├─ Load Avg     :${RESET} $(cat /proc/loadavg | awk '{print $1", "$2", "$3}')"
echo -e "${GREEN}└─ Processes    :${RESET} $(ps ax | wc -l) Running"
echo ""
echo -e "${BLUE}${BOLD}> Network Information${RESET}"
echo -e "${GREEN}├─ IPv4 Support :${RESET} $ipv4_support"
echo -e "${GREEN}├─ IPv6 Support :${RESET} $ipv6_support"
echo -e "${GREEN}├─ Local IPv4   :${RESET} $(ip -4 -o addr show scope global | awk '{print $4}' | cut -d/ -f1 | grep -v '^127\.' | head -n 1)"
get_public_ip_if_nat
echo -e "${GREEN}├─ Local IPv6   :${RESET} $(ip -6 addr show scope global | grep inet6 | awk '{print $2}' | head -n 1)"
echo -e "${GREEN}├─ Gateway      :${RESET} $(ip route | grep default | awk '{print $3}' | head -n 1)"
get_provider_info
get_vnstat_info
get_update_info
echo -e "${GREEN}${BOLD}└─ Koneksi      :${RESET} $(detect_nat_status)"
echo ""
echo -e "$separator"
echo -e "    ${CYAN}Empowering your productivity, one command at a time.${RESET}"
echo -e "        ${YELLOW}~ System ready. Unleash your potential! ~${RESET}"
echo -e "$separator"
